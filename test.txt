Web-app diary

3/14/12 11:17:51 PM
Begin to finish the final homework today.
1. Decided to use the pattern from Jeff
2. Configuration should be rather stable and not easy to change like User, so for User object we got to 
use the Generic DAO
3. The generic DAO has some problem with types such as TimeZone and Friend list. So I should implement something that is universal, the model? Cool

3/16/12 1:22:14 PM
We will use a FormBeanFactory to do the following things:

1. Enable the form's getters to be reader by a method in the super class BaseFormBean
2. But using reflection could be really time consuming. Besides using Java 7, one possible way is to cache all the Methods in the class. But how can we do this?
3. Or if there are any other ways to do this? Our object could be initialized for multiple times, but those methods only needed to be filled once.
4. Or we could simply use Java 7 which could be faster for sure.
5. Oh, why don't we use another object or a class which is standalone to hold these methods?

This should be viable.

The process is like:
1. The BaseFormBean requires a Context to be passed to him every time initialized.
2. This context provides put and get method, and the context could record whether a FormBean's methods are put into it's map.

The mechanism is like this:

1. Using assertion to specify which getters to do the check. Currently only empty check is available, but in the future there is possibilities to expend.
2. Assume the form beans only provide String parameters, just like what the HttpRequest's parameters does.
3. So when reading the annotation on getters the BaseFormBean will check the return type


3/16/12 7:43:12 PM

==Error list page should be synchronized:
"errors" is an array list that in the request that stored all the error messages. It's generated by the actions and read by the error-list.jsp. 

Welcome action and Login action
==Welcome action needs to show the following things
1. The Hottest users needed to be stetted to the request/session, or we simply set them to the action object/application context itself. and regularly update it, using another thread. So the JSTL should be used on that page
2. userCount, friendshipCount needs to be shown in the page. The keywords will be used. They will be stored in the application context if better and updated regularly.
3. The register button links to the register action.
----Problem to be decided here:
----How the hottest user's image to be shown, how their university is like. 
----Something wrong is happening here, the user object is obviously more than what we have designed before.
----Anyway, let's logged in first.

==Login action needs to synchronize the following things:
1. the login action name: login action, given by the class annotation of LoginAction
2. username, password are the field names, should be same as the LoginForm.


3/17/12 5:25:57 PM
Java's type inference in generic really suck.
The fact about class generic is, type parameter won't be store in the runtime
So if you're using a generic class, the return type is actually the original one, like Object for map's get.
No matter whether you utilize Map<String, String> or what.

The method signature even does not have this type parameter at all.

THe only thing is remembered is the compiler, the compiler will show that the method returns the type you like, but actually not.
Fuck it. That's why you can't use return type of such method to infer the generic type parameter.

3/17/12 6:28:19 PM
==Userdao has something to synchronize
::1. The read by username, used the column name of username, which is also a field variable name

3/18/12 12:59:49 AM
Going to the side of Friendship
==
The subscription-ship database
The semi-relationship database
The semi-friendship database

Which name is better? 
Just call it friendship
Friendship(id, srcUserId, destUserId)
What about creation time?

So The structure of the Friendship class will be used by the FriendshipDAO in a static way as in the findBySrcId method.


=======framework========
AJAX's
The HOTTEST USERS action will be performed AJAX, irrelevant from Login and Welcome
The count of the total Users and Total friendship relationships will be separate actions.
So there would be JSP to form XML

There should be a HeadBar and a FootBar

=======Form Beans=======
updateProfile use the same username,  f name, l name as the registrate page to represent user's attributes.

------Action and form beans-----
For action that may face a null request, then judge !form.present() before validate() is the right choice, because the validate will call isPresent first and if not validate will return an empty error list, if the getValidation error take empty as sign of non-error, then error will orrur.

-----SO, when CODING, it's really important to know the precondition, and the things returned. ------

-----ProfileUpdateForm, registrateForm,-----
Use similar char validation than the query form. But I''m not so sure with query form, because right now it's only deal with user first name and last, what about in the future?
"<>\"*&"


=======Functions========
----Search----
What if user name contains space char?
Char les, XINKAI
then if entered char les, separate to char  les
What logic should be use to return the users?
The searchAction stores a "result" that is a User array into the request, and the search.jsp should get something like that from the request.

-----Ajax actions-----
Add and delete friendship action if change to ajax, then there should be pages that could only tell the browser whether the ajax operation succeeded or failed. While give the reason at the same time. However this could be hard.

ok, start with
So first name starts with
----Add friendship----
User session key: user as login user.
What should happen if I successfully added someone as friend?
1. I should be notified
2. I should be able to see this friend's postings.
3. So it is natural to think after successfully adding a friend a redirect to the home page should be executed

--What happened on twitter, is, the friendship could only be added in a different page from the home page.
--Or, it just return a status telling you whether successful or not. Then it becomes an ajax request. I should use ajax


----Home Action----
Used session key: 
--user as login user. 
--friends as friend list of the current user. When deleting a friend, such list should be changed.SO it's better the result of moving or adding a friend redirect to the home.do action.

--Learning to use c:set and jsp:useBean, later can specify class type, while former can set a var and assign value as string to it.<c:set var="pizzaSele" value="true"/> <jsp:useBean id="now" class="java.util.Date"/>

--putting into request "friends" as friend list.that needs home.jsp to read from.

--put into request "storyView" as a view that have story and comments

----------
Some how, the form bean factory only provides getter invocation for String arguments. shit.
So the solution is add another annotation that indicates Integer, and will result in the validate method a check on the number format. But at first I changed the name of the param to dstIdStr, and added another method in the form that provides getDstId returned actually an integer. Later found this is bad, because this results in confusion in the browser side. say, param name=dstIdStr?? wtf?


----Hottest AJAX Action----

----AddPostAction DeletePostAction----
type=story || type= comment

----Can I added myself as friend?-----

----ImageAction-----
Will save to request attributes "photo", and the image servlet will get it.

I decided to use an separate image upload action to avoid the problem that initial request may cause the BFactory to throw BeanForm error in content type. Actually the factory failed to found there is no request and form present when given a file format. There must be a logical problem there, just like I used empty list to identify no errors while it also could mean the !form.isPresent.
I used the content type to justify, however if intentionally call it post with the content type, exception would still be thrown, but this is better, Then I saw maybe I don't need to just create another upload action for profile pictures.

This action returns to the profileUpdate.do

//But in the future it should be ajax and should return a successful message.

The image action will load a default profile picture from server's hard disc. Once it failed to load the file, users don't get the default profile pics.And, the file name is default.jpeg in the action. 

But later I decided this should be done by the initialization of the servlet.

Found a way to convert file into byte array:
1. Using apache.commons.io.FileUtils.readFileToByteArray(not much applicable here)
2. Using ……io. IOUtils.toByteArray(inputStream in)

Or, read all things into a ByteArrayOutputStream in java.io, then toByteArray().


=======CommentDAO=======
readByStories()
It used the key string "storyId" as the search queteria. which depends on the class variable storyId of comment


=====Concerning FormBeanFactory======
I'm not sure whether it will fill the form with null values or not.
I experienced a null pointer exception when I tried to fill the update form, actually I'm using trimAndReplace in the setter, that's why I added a not null check before that.